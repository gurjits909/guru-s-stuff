 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> pi;
class myclass{
 int operator()(const pi& a,const pi &b)
 {
     return a.first>b.first;
 }
};
void run_dijks(vector<vector<pi>>&graph,map<pi,int>&weight,int src)
{
    int n=graph.size();
    vector<int> dist(graph.size(),INT_MAX);
    dist[0]=0;
    priority_queue<pi,vector<qi>,myclass>que;
    que.push(make_pair(0,src));
    while(!que.empty())
    {
        int v;
        v=que.top().second;
        que.pop();
        for(int i=0;i<graph[v].size();i++)
        {
            int u,w_;
            u=graph[v][i].first;
            w_=graph[v][i].second;
            if(dist[u]>dist[v]+w_)
            {
                dist[u]=dist[v]+w_;
                que.push(make_pair(dist[u]+w_,u));
            }
        }
    }
    for(int i=0;i<dist.size();i++)
    cout<<dist[i]<<" ";
    cout<<"\n";
}

int main() {
    int n;
    cin>>n;
    vector<vector<pi>> graph(n);
    map<pair<int,int>,int>weight;
    int edges;cin>>edges;
    for(int i=0;i<edges;i++)
    {
        int v1,v2,w;
        cin>>v1>>v2>>w;
        graph[v1].push_back(make_pair(v2,w));
        graph[v2].push_back(make_pair(v1,w));
        weight[make_pair(v1,v2)]=w;
        weight[make_pair(v2,v1)]=w;
    }
    run_dijks(graph,weight,0);
	return 0;
}
